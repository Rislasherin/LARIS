<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>Beauty Cart - Select Address</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap" rel="stylesheet">
  <style>
    body { 
      font-family: 'Lato', sans-serif; 
      background-color: #f9fafb; 
    }
    .input-field {
      border: 1px solid #e2e8f0;
      transition: all 0.2s ease;
    }
    .input-field:focus {
      border-color: palevioletred;
      outline: none;
      box-shadow: 0 0 0 2px pink;
    }
    .checkout-step {
      position: relative;
      display: flex;
      align-items: center;
    }
    .checkout-step:not(:last-child)::after {
      content: '';
      position: absolute;
      height: 2px;
      width: 100%;
      background-color: #e5e7eb;
      top: 50%;
      left: 50%;
      z-index: 0;
    }
    .step-circle {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background-color: #fff;
      border: 2px solid #e5e7eb;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1;
    }
    .step-active .step-circle {
      border-color: black;
      background-color: black;
      color: white;
    }
    .step-completed .step-circle {
      border-color: #10b981;
      background-color: #10b981;
      color: white;
    }
    .address-card {
      transition: all 0.2s ease;
    }
    .address-card.selected {
      border-color: pink;
      box-shadow: 0 0 0 1px palevioletred;
    }
    .address-card:hover {
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
  </style>
</head>
<body>
  <%- include('../partials/user/header') %>

  <div class="container mx-auto px-4 py-8 max-w-5xl">
    <!-- Checkout Progress -->
    <div class="flex justify-center mb-10">
      <div class="w-full max-w-3xl flex justify-between">
        <div class="checkout-step step-completed flex-1 text-center">
          <div class="flex flex-col items-center">
            <div class="step-circle">
              <i class="fas fa-check text-sm"></i>
            </div>
            <span class="text-sm mt-2 text-gray-700">Cart</span>
          </div>
        </div>
        <div class="checkout-step step-active flex-1 text-center">
          <div class="flex flex-col items-center">
            <div class="step-circle">
              2
            </div>
            <span class="text-sm mt-2 text-gray-700">Address</span>
          </div>
        </div>
        <div class="checkout-step flex-1 text-center">
          <div class="flex flex-col items-center">
            <div class="step-circle">
              3
            </div>
            <span class="text-sm mt-2 text-gray-700">Payment</span>
          </div>
        </div>
        <div class="checkout-step flex-1 text-center">
          <div class="flex flex-col items-center">
            <div class="step-circle">
              4
            </div>
            <span class="text-sm mt-2 text-gray-700">Confirmation</span>
          </div>
        </div>
      </div>
    </div>

    <h1 class="text-3xl font-bold mb-8 text-center text-gray-800">Shipping Address</h1>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Addresses Column -->
      <div class="lg:col-span-2">
        <form action="/checkout/payment" method="POST" id="address-form">
          <% if (userAddresses && userAddresses.length > 0) { %>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4" id="address-list">
              <% userAddresses.forEach((addr, index) => { %>
                <div class="address-card bg-white border rounded-lg p-4 <%= addr.isDefault ? 'selected' : '' %>" data-address-id="<%= addr._id %>">
                  <div class="flex items-start mb-3">
                    <input 
                      type="radio" 
                      name="selectedAddress" 
                      id="address-<%= addr._id %>" 
                      value="<%= addr._id %>" 
                      <%= addr.isDefault ? 'checked' : '' %>
                      class="mt-1 mr-2"
                    >
                    <div>
                      <label for="address-<%= addr._id %>" class="font-medium text-gray-800 block mb-1">
                        <%= addr.fullName %>
                      </label>
                      <span class="inline-block bg-gray-100 text-gray-700 px-2 py-1 text-xs rounded mb-2">
                        <%= addr.addressType %>
                      </span>
                      <% if (addr.isDefault) { %>
                        <span class="inline-block bg-black text-white px-2 py-1 text-xs rounded mb-2 ml-1">
                          Default
                        </span>
                      <% } %>
                      <p class="text-gray-600 text-sm">
                        <%= addr.address %><br>
                        <%= addr.city %>, <%= addr.state %><br>
                        <%= addr.country %> <%= addr.pincode %><br>
                        Phone: <%= addr.phone %>
                      </p>
                    </div>
                  </div>
                  <div class="flex justify-end space-x-2 mt-2 text-sm">
                    <a href="#" class="text-black hover:text-pink-200 edit-address" data-address-id="<%= addr._id %>">Edit</a>
                    <span class="text-gray-300">|</span>
                    <a href="#" class="text-gray-600 hover:text-gray-800 remove-address" data-address-id="<%= addr._id %>">Remove</a>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } %>
          
          <button type="button" id="add-address-btn" class="mt-6 flex items-center text-black hover:text-gray-800">
            <i class="fas fa-plus-circle mr-2"></i> Add New Address
          </button>
        </form>
      </div>
      
      <!-- Order Summary -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow p-6 sticky top-6">
          <h2 class="text-lg font-bold mb-4 text-gray-800 pb-2 border-b">
            Order Summary
          </h2>
          <div class="space-y-3 mb-6">
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Subtotal</span>
              <span>₹<%= subtotal ? subtotal.toFixed(2) : '0.00' %></span>
            </div>
            <% if (discount && discount > 0) { %>
              <div class="flex justify-between text-sm text-green-600">
                <span>Discount</span>
                <span>-₹<%= discount.toFixed(2) %></span>
              </div>
            <% } %>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Shipping</span>
              <span>₹<%= shippingCost ? shippingCost.toFixed(2) : '0.00' %></span>
            </div>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Tax</span>
              <span>₹<%= tax ? tax.toFixed(2) : '0.00' %></span>
            </div>
          </div>
          <div class="flex justify-between font-bold text-lg pt-4 border-t">
            <span>Total</span>
            <span>₹<%= total ? total.toFixed(2) : '0.00' %></span>
          </div>
          <button type="submit" form="address-form" class="w-full bg-black text-white py-3 rounded hover:bg-gray-900 transition mt-6 font-medium"
            <%= userAddresses && userAddresses.length > 0 ? '' : 'disabled' %>
          >
            Proceed to Payment
          </button>
          <div class="mt-4 flex items-center justify-center text-gray-500 text-sm">
            <i class="fas fa-shield-alt mr-2 text-green-500"></i>
            Secure Checkout
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Address Modal -->
  <div id="address-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-6 border max-w-md w-full shadow-lg rounded-lg bg-white">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-semibold text-gray-800">Add New Address</h3>
        <button id="close-modal" class="text-gray-500 hover:text-gray-700">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <form id="new-address-form">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
            <input type="text" name="fullName" class="input-field w-full px-3 py-2 rounded-md" required>
          </div>
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
            <input type="tel" name="phone" class="input-field w-full px-3 py-2 rounded-md" required>
          </div>
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Address</label>
            <input type="text" name="address" class="input-field w-full px-3 py-2 rounded-md" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">City</label>
            <input type="text" name="city" class="input-field w-full px-3 py-2 rounded-md" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">State</label>
            <input type="text" name="state" class="input-field w-full px-3 py-2 rounded-md" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Country</label>
            <input type="text" name="country" class="input-field w-full px-3 py-2 rounded-md" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Pincode</label>
            <input type="text" name="pincode" class="input-field w-full px-3 py-2 rounded-md" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Address Type</label>
            <select name="addressType" class="input-field w-full px-3 py-2 rounded-md bg-white" required>
              <option value="Home">Home</option>
              <option value="Work">Work</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="md:col-span-2">
            <div class="flex items-center mt-2">
              <input type="checkbox" name="isDefault" id="isDefault" class="h-4 w-4 text-black">
              <label for="isDefault" class="ml-2 text-sm text-gray-700">Set as default address</label>
            </div>
          </div>
        </div>
        
        <div class="mt-6 flex justify-end space-x-3">
          <button type="button" id="cancel-address" class="px-4 py-2 bg-gray-100 rounded hover:bg-gray-200 transition text-gray-800">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 bg-black-600 text-white rounded hover:bg-gray-700 transition">
            Save Address
          </button>
        </div>
      </form>
    </div>
  </div>

  <%- include('../partials/user/footer') %>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const addAddressBtn = document.getElementById('add-address-btn');
      const addressModal = document.getElementById('address-modal');
      const cancelAddressBtn = document.getElementById('cancel-address');
      const closeModalBtn = document.getElementById('close-modal');
      const newAddressForm = document.getElementById('new-address-form');
      let isEditMode = false; // Flag to track if we're in edit mode
      let currentAddressId = null; // Store the address ID being edited
    
      // Open modal for adding address
      addAddressBtn.addEventListener('click', () => {
        isEditMode = false; // Reset to add mode
        currentAddressId = null;
        document.querySelector('h3').textContent = 'Add New Address'; // Set modal title
        newAddressForm.reset(); // Clear form
        addressModal.classList.remove('hidden');
      });
      
      // Close modal functions
      function closeModal() {
        addressModal.classList.add('hidden');
        newAddressForm.reset(); // Reset form when closing
        isEditMode = false; // Reset edit mode
        currentAddressId = null;
        document.querySelector('h3').textContent = 'Add New Address'; // Reset title
      }
      
      cancelAddressBtn.addEventListener('click', closeModal);
      closeModalBtn.addEventListener('click', closeModal);
      
      addressModal.addEventListener('click', function(e) {
        if (e.target === addressModal) closeModal();
      });
    
      // Address selection logic
      const addressCards = document.querySelectorAll('.address-card');
      addressCards.forEach(card => {
        const radioInput = card.querySelector('input[type="radio"]');
        card.addEventListener('click', function(e) {
          if (e.target.tagName !== 'A') { // Ignore clicks on Edit/Remove links
            addressCards.forEach(c => c.classList.remove('selected'));
            card.classList.add('selected');
            radioInput.checked = true;
          }
        });
      });
    
      // Edit Address
      const editButtons = document.querySelectorAll('.edit-address');
      editButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          const addressId = button.getAttribute('data-address-id');
          
          try {
            const response = await fetch(`/get-address/${addressId}`);
            const address = await response.json();
    
            if (address.success) {
              // Populate the modal with existing address data
              document.querySelector('[name="fullName"]').value = address.data.fullName || '';
              document.querySelector('[name="phone"]').value = address.data.phone || '';
              document.querySelector('[name="address"]').value = address.data.address || '';
              document.querySelector('[name="city"]').value = address.data.city || '';
              document.querySelector('[name="state"]').value = address.data.state || '';
              document.querySelector('[name="country"]').value = address.data.country || '';
              document.querySelector('[name="pincode"]').value = address.data.pincode || '';
              document.querySelector('[name="addressType"]').value = address.data.addressType || 'Home';
              document.querySelector('[name="isDefault"]').checked = address.data.isDefault || false;
    
              // Switch to edit mode
              isEditMode = true;
              currentAddressId = addressId;
              document.querySelector('h3').textContent = 'Edit Address'; // Update modal title
              addressModal.classList.remove('hidden');
            } else {
              showNotification(address.message || 'Failed to load address', false);
            }
          } catch (error) {
            console.error('Error fetching address:', error);
            showNotification('Error loading address', false);
          }
        });
      });
    
      // Remove Address
      const removeButtons = document.querySelectorAll('.remove-address');
      removeButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          const addressId = button.getAttribute('data-address-id');
          if (confirm('Are you sure you want to remove this address?')) {
            try {
              const response = await fetch(`/remove-address/${addressId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
              });
              const result = await response.json();
    
              if (result.success) {
                showNotification('Address removed successfully');
                button.closest('.address-card').remove();
              } else {
                showNotification(result.message || 'Error removing address', false);
              }
            } catch (error) {
              console.error('Error:', error);
              showNotification('Error removing address', false);
            }
          }
        });
      });
    
      // Form Submission (Add or Edit)
      newAddressForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(newAddressForm);
        const data = Object.fromEntries(formData);
        data.isDefault = formData.get('isDefault') ? true : false;
    
        const url = isEditMode ? `/edit-address/${currentAddressId}` : '/add-address';
        const method = isEditMode ? 'PUT' : 'POST';
    
        try {
          const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });
          const result = await response.json();
    
          if (result.success) {
            showNotification(isEditMode ? 'Address updated successfully' : 'Address saved successfully');
            closeModal();
            location.reload(); // Reload to reflect changes
          } else {
            showNotification(result.message || `Error ${isEditMode ? 'updating' : 'saving'} address`, false);
          }
        } catch (error) {
          console.error('Error:', error);
          showNotification(`Error ${isEditMode ? 'updating' : 'saving'} address`, false);
        }
      });
    
      function showNotification(message, isSuccess = true) {
        let notificationContainer = document.getElementById('notification-container');
        if (!notificationContainer) {
          notificationContainer = document.createElement('div');
          notificationContainer.id = 'notification-container';
          notificationContainer.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 1000;';
          document.body.appendChild(notificationContainer);
        }
    
        const notification = document.createElement('div');
        notification.className = `text-white px-4 py-2 rounded shadow-lg mb-2 ${isSuccess ? 'bg-green-500' : 'bg-red-500'}`;
        notification.textContent = message;
        notification.style.cssText = 'transform: translateX(100%); transition: transform 0.3s ease-out;';
        
        notificationContainer.appendChild(notification);
        notification.offsetWidth; // Trigger reflow
        notification.style.transform = 'translateX(0)';
        
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }
    });
    </script>
</body>
</html>