<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Book | Furniture E-commerce</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2A3F54;
            --secondary-color: #F4F5F7;
            --accent-color: pink;
            --text-color: #333;
            --light-text: #6C757D;
            --border-radius: 12px;
            --box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #F8F9FA;
            color: var(--text-color);
        }

        .account-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .addresses-container {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1.5rem;
            height: 100%;
        }

        .address-card {
            border: 1px solid var(--secondary-color);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            position: relative;
            transition: transform 0.3s ease;
        }

        .address-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--box-shadow);
        }

        .address-type {
            position: absolute;
            top: 1rem;
            right: 1rem;
            padding: 0.25rem 0.75rem;
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .address-type-home {
            background-color: #D4EDDA;
            color: #155724;
        }

        .address-type-work {
            background-color: #CCE5FF;
            color: #004085;
        }

        .address-name {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .address-details {
            color: var(--light-text);
            margin-bottom: 0.25rem;
        }

        .address-actions {
            display: flex;
            margin-top: 1.5rem;
            gap: 0.5rem;
        }

        .add-address-card {
            border: 2px dashed var(--secondary-color);
            border-radius: var(--border-radius);
            padding: 2rem;
            margin-bottom: 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .add-address-card:hover {
            border-color: var(--accent-color);
            background-color: var(--secondary-color);
        }

        .add-address-icon {
            font-size: 2rem;
            color: var(--accent-color);
            margin-bottom: 1rem;
        }

        .btn-accent {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
            color: white;
        }

        .btn-accent:hover {
            background-color: #D35400;
            border-color: #D35400;
            color: white;
        }

        .btn-outline-accent {
            color: var(--accent-color);
            border-color: var(--accent-color);
        }

        .btn-outline-accent:hover {
            background-color: var(--accent-color);
            color: white;
        }

        .modal-header {
            background-color: var(--primary-color);
            color: white;
        }

        .modal-content {
            border-radius: var(--border-radius);
            overflow: hidden;
        }
    </style>
</head>

<body>
    <%- include('../partials/user/header') %>
        <div class="account-container">
            <%- include('../partials/user/profileHeader') %>
            <div class="addresses-container">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Address Book</h2>
                    <button class="btn btn-accent" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <i class="fas fa-plus me-2"></i> Add New Address
                    </button>
                </div>

                <div class="row">
                    <% addresses.forEach(function(address) { %>
                        <div class="col-lg-6 col-md-12 mb-4">
                            <div class="address-card">
                                <div
                                    class="address-type <%= address.addressType === 'Home' ? 'address-type-home' : 'address-type-work' %>">
                                    <%= address.addressType %>
                                </div>
                                <div class="address-name">
                                    <%= address.fullName %>
                                </div>
                                <div class="address-details">
                                    <%= address.address %>
                                </div>
                                <div class="address-details">
                                    <%= address.city %>, <%= address.state %>
                                            <%= address.pincode %>
                                </div>
                                <div class="address-details">
                                    <%= address.country %>
                                </div>
                                <div class="address-details">Phone: <%= address.phone %>
                                </div>
                                <div class="address-actions">
                                    <button class="btn btn-sm btn-outline-accent edit-address"
                                        data-id="<%= address._id %>" data-bs-toggle="modal"
                                        data-bs-target="#editAddressModal">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger delete-address"
                                        data-id="<%= address._id %>">Delete</button>
                                </div>
                            </div>
                        </div>
                        <% }); %>

                            <!-- Add New Address Card -->
                            <div class="col-lg-6 col-md-12 mb-4">
                                <div class="add-address-card" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                                    <div class="add-address-icon">
                                        <i class="fas fa-plus-circle"></i>
                                    </div>
                                    <h5>Add New Address</h5>
                                </div>
                            </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editAddressForm">
                        <input type="hidden" id="editAddressId" name="addressId">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editFullName" class="form-label">Full Name*</label>
                                <input type="text" class="form-control" id="editFullName" name="fullName" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editPhone" class="form-label">Phone Number*</label>
                                <input type="tel" class="form-control" id="editPhone" name="phone" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="editAddress" class="form-label">Address*</label>
                            <input type="text" class="form-control" id="editAddress" name="address" required>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCity" class="form-label">City*</label>
                                <input type="text" class="form-control" id="editCity" name="city" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editState" class="form-label">State/Province*</label>
                                <input type="text" class="form-control" id="editState" name="state" required>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCountry" class="form-label">Country*</label>
                                <select class="form-select" id="editCountry" name="country" required>
                                    <option value="">Select Country</option>
                                    <option value="United States">United States</option>
                                    <option value="Canada">Canada</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Australia">Australia</option>
                                    <option value="India">India</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editPincode" class="form-label">ZIP/Postal Code*</label>
                                <input type="text" class="form-control" id="editPincode" name="pincode" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label d-block">Address Type*</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="editTypeHome"
                                    value="Home">
                                <label class="form-check-label" for="editTypeHome">Home</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="editTypeWork"
                                    value="Work">
                                <label class="form-check-label" for="editTypeWork">Work</label>
                            </div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="isDefault" name="isDefault">
                            <label class="form-check-label" for="isDefault">Set as Default Address</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-accent" onclick="updateAddress()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addAddressForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="fullName" class="form-label">Full Name*</label>
                                <input type="text" class="form-control" id="fullName" name="fullName" required>
                            </div>
                            <div class="col-md-6">
                                <label for="phone" class="form-label">Phone Number*</label>
                                <input type="tel" class="form-control" id="phone" name="phone" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="address" class="form-label">Address*</label>
                            <input type="text" class="form-control" id="address" name="address" required>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="city" class="form-label">City*</label>
                                <input type="text" class="form-control" id="city" name="city" required>
                            </div>
                            <div class="col-md-6">
                                <label for="state" class="form-label">State/Province*</label>
                                <input type="text" class="form-control" id="state" name="state" required>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="country" class="form-label">Country*</label>
                                <select class="form-select" id="country" name="country" required>
                                    <option value="">Select Country</option>
                                    <option value="United States">United States</option>
                                    <option value="Canada">Canada</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Australia">Australia</option>
                                    <option value="India">India</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="pincode" class="form-label">ZIP/Postal Code*</label>
                                <input type="text" class="form-control" id="pincode" name="pincode" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label d-block">Address Type*</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="typeHome"
                                    value="Home" checked>
                                <label class="form-check-label" for="typeHome">Home</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="typeWork"
                                    value="Work">
                                <label class="form-check-label" for="typeWork">Work</label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-accent" onclick="saveNewAddress()">Save Address</button>
                </div>
            </div>
        </div>
    </div>

     <!-- Delete Address Modal -->
     <div class="modal fade" id="deleteAddressModal" tabindex="-1" aria-labelledby="deleteAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteAddressModalLabel">Delete Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this address? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="deleteAddress()">Delete Address</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Set Default Address Modal -->
    <div class="modal fade" id="setDefaultModal" tabindex="-1" aria-labelledby="setDefaultModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="setDefaultModalLabel">Set as Default Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to set this address as your default address?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-accent" onclick="setDefaultAddress()">Set as Default</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Define global functions for address management

        // Function to save a new address
        function saveNewAddress() {
        const form = document.getElementById('addAddressForm');

        if (form.checkValidity()) {
            const formData = {
                fullName: document.getElementById('fullName').value,
                phone: document.getElementById('phone').value,
                address: document.getElementById('address').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                country: document.getElementById('country').value,
                pincode: document.getElementById('pincode').value,
                addressType: document.querySelector('input[name="addressType"]:checked').value
            };

            fetch('/address/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => {
                            console.error('Error response:', text);
                            throw new Error(`HTTP error! status: ${response.status}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Find the row container and the "Add New Address" card
                        const addressesContainer = document.querySelector('.row');
                        const addNewAddressCard = addressesContainer.querySelector('.add-address-card').closest('.col-lg-6');

                        // Create the new address card
                        const newAddressCol = document.createElement('div');
                        newAddressCol.className = 'col-lg-6 col-md-12 mb-4';
                        newAddressCol.innerHTML = `
                            <div class="address-card">
                                <div class="address-type ${data.address.addressType === 'Home' ? 'address-type-home' : 'address-type-work'}">
                                    ${data.address.addressType}
                                </div>
                                <div class="address-name">${data.address.fullName}</div>
                                <div class="address-details">${data.address.address}</div>
                                <div class="address-details">
                                    ${data.address.city}, ${data.address.state} ${data.address.pincode}
                                </div>
                                <div class="address-details">${data.address.country}</div>
                                <div class="address-details">Phone: ${data.address.phone}</div>
                                <div class="address-actions">
                                    <button class="btn btn-sm btn-outline-accent edit-address" data-id="${data.address._id}" data-bs-toggle="modal" data-bs-target="#editAddressModal">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger delete-address" data-id="${data.address._id}">Delete</button>
                                </div>
                            </div>
                        `;

                        // Insert the new address card before the "Add New Address" card
                        addressesContainer.insertBefore(newAddressCol, addNewAddressCard);

                        // Close the modal
                        const addAddressModal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
                        if (addAddressModal) {
                            addAddressModal.hide();
                        }

                        // Show success message with Sweet Alert
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Added',
                            text: 'Your new address has been successfully added.',
                            showConfirmButton: false,
                            timer: 2000
                        });

                        // Reset the form
                        form.reset();
                    } else {
                        // Show error message with Sweet Alert
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: data.message || 'Failed to add address'
                        });
                    }
                })
                .catch(error => {
                    console.error('Complete error details:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while adding the address. Please check the console for details.'
                    });
                });
        } else {
            form.reportValidity();
        }
    }

        // Function to update an existing address
        function updateAddress() {
        const form = document.getElementById('editAddressForm');

        if (form.checkValidity()) {
            const addressId = document.getElementById('editAddressId').value;
            const formData = {
                fullName: document.getElementById('editFullName').value,
                phone: document.getElementById('editPhone').value,
                address: document.getElementById('editAddress').value,
                city: document.getElementById('editCity').value,
                state: document.getElementById('editState').value,
                country: document.getElementById('editCountry').value,
                pincode: document.getElementById('editPincode').value,
                addressType: document.querySelector('input[name="addressType"]:checked').value
            };

            // Send AJAX request to update address
            fetch(`/update-address/${addressId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update the address card in the UI
                        const addressCard = document.querySelector(`.edit-address[data-id="${addressId}"]`).closest('.address-card');

                        addressCard.querySelector('.address-type').textContent = data.address.addressType;
                        addressCard.querySelector('.address-type').className = `address-type ${data.address.addressType === 'Home' ? 'address-type-home' : 'address-type-work'}`;
                        addressCard.querySelector('.address-name').textContent = data.address.fullName;

                        const addressDetailsElements = addressCard.querySelectorAll('.address-details');
                        addressDetailsElements[0].textContent = data.address.address;
                        addressDetailsElements[1].textContent = `${data.address.city}, ${data.address.state} ${data.address.pincode}`;
                        addressDetailsElements[2].textContent = data.address.country;
                        addressDetailsElements[3].textContent = `Phone: ${data.address.phone}`;

                        // Close the modal
                        const editAddressModal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                        if (editAddressModal) {
                            editAddressModal.hide();
                        }

                        // Show success message with Sweet Alert
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Updated',
                            text: 'Your address has been successfully updated.',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    } else {
                        // Show error message with Sweet Alert
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: data.message || 'Failed to update address'
                        });
                    }
                })
                .catch(error => {
                    console.error('Complete error details:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while updating the address'
                    });
                });
        } else {
            form.reportValidity();
        }
    }
        // Event listener for editing addresses
        document.addEventListener('DOMContentLoaded', function () {
            // Edit Address Modal Popup
            document.querySelector('.row').addEventListener('click', function (event) {
                const editBtn = event.target.closest('.edit-address');
                if (editBtn) {
                    const addressId = editBtn.getAttribute('data-id');
                    console.log('Attempting to fetch address with ID:', addressId);

                    // Fetch address details to populate edit modal
                    fetch(`/user/addresses/${addressId}`)
                        .then(response => {
                            console.log('Response status:', response.status);
                            console.log('Response headers:', response.headers.get('content-type'));

                            // Check if response is OK and is JSON
                            if (!response.ok) {
                                return response.text().then(text => {
                                    console.error('Error response body:', text);
                                    throw new Error(`HTTP error! status: ${response.status}`);
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Received data:', data);

                            if (data.success) {
                                const address = data.address;

                                // Populate edit form
                                document.getElementById('editAddressId').value = address._id;
                                document.getElementById('editFullName').value = address.fullName;
                                document.getElementById('editPhone').value = address.phone;
                                document.getElementById('editAddress').value = address.address;
                                document.getElementById('editCity').value = address.city;
                                document.getElementById('editState').value = address.state;
                                document.getElementById('editCountry').value = address.country;
                                document.getElementById('editPincode').value = address.pincode;

                                // Set address type radio
                                if (address.addressType === 'Home') {
                                    document.getElementById('editTypeHome').checked = true;
                                } else {
                                    document.getElementById('editTypeWork').checked = true;
                                }
                            } else {
                                console.error('Failed to fetch address:', data);
                                alert(data.message || 'Failed to load address details');
                            }
                        })
                        .catch(error => {
                            console.error('Complete error details:', error);
                            alert('Failed to load address details. Please check console for more information.');
                        });
                }
            });

// Delete Address Functionality with SweetAlert2
document.querySelector('.row').addEventListener('click', function (event) {
    const deleteBtn = event.target.closest('.delete-address');
    if (deleteBtn) {
        const addressId = deleteBtn.getAttribute('data-id');
        const addressCard = deleteBtn.closest('.col-lg-6');

        // Show SweetAlert2 confirmation
        Swal.fire({
            title: 'Are you sure?',
            text: 'This action cannot be undone!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/delete-address/${addressId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove the address card from the DOM
                        addressCard.remove();

                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: 'The address has been deleted.',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: data.message || 'Failed to delete address'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error deleting address:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while deleting the address'
                    });
                });
            }
        });
    }
})
        })
    </script>
</body>

</html>