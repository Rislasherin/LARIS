<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Book | Furniture E-commerce</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2A3F54;
            --secondary-color: #F4F5F7;
            --accent-color: pink;
            --text-color: #333;
            --light-text: #6C757D;
            --border-radius: 12px;
            --box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #F8F9FA;
            color: var(--text-color);
            overflow-x: hidden;
        }

        .account-container {
            max-width: 1400px;
            width: 100%;
            margin: 1rem auto;
            padding: 0 0.75rem;
        }

        @media (min-width: 768px) {
            .account-container {
                margin: 2rem auto;
                padding: 0 1rem;
            }
        }

        .addresses-container {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1rem;
            height: 100%;
        }

        @media (min-width: 768px) {
            .addresses-container {
                padding: 1.5rem;
            }
        }

        .address-card {
            border: 1px solid var(--secondary-color);
            border-radius: var(--border-radius);
            padding: 1rem;
            margin-bottom: 1rem;
            position: relative;
            transition: transform 0.3s ease;
        }

        @media (min-width: 768px) {
            .address-card {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }
        }

        .address-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--box-shadow);
        }

        .address-type {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 50px;
            font-size: 0.7rem;
            font-weight: 600;
        }

        @media (min-width: 768px) {
            .address-type {
                top: 1rem;
                right: 1rem;
                padding: 0.25rem 0.75rem;
                font-size: 0.8rem;
            }
        }

        .address-type-home {
            background-color: #D4EDDA;
            color: #155724;
        }

        .address-type-work {
            background-color: #CCE5FF;
            color: #004085;
        }

        .address-name {
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 0.5rem;
            padding-right: 60px; /* Make room for the address type label */
            word-break: break-word;
        }

        @media (min-width: 768px) {
            .address-name {
                font-size: 1.1rem;
            }
        }

        .address-details {
            color: var(--light-text);
            margin-bottom: 0.25rem;
            word-break: break-word;
            font-size: 0.9rem;
        }

        @media (min-width: 768px) {
            .address-details {
                font-size: 1rem;
            }
        }

        .address-actions {
            display: flex;
            margin-top: 1rem;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        @media (min-width: 768px) {
            .address-actions {
                margin-top: 1.5rem;
            }
        }

        .add-address-card {
            border: 2px dashed var(--secondary-color);
            border-radius: var(--border-radius);
            padding: 1.5rem 1rem;
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        @media (min-width: 768px) {
            .add-address-card {
                padding: 2rem;
                margin-bottom: 1.5rem;
            }
        }

        .add-address-card:hover {
            border-color: var(--accent-color);
            background-color: var(--secondary-color);
        }

        .add-address-icon {
            font-size: 1.5rem;
            color: var(--accent-color);
            margin-bottom: 0.75rem;
        }

        @media (min-width: 768px) {
            .add-address-icon {
                font-size: 2rem;
                margin-bottom: 1rem;
            }
        }

        .btn-accent {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
            color: white;
        }

        .btn-accent:hover {
            background-color: #D35400;
            border-color: #D35400;
            color: white;
        }

        .btn-outline-accent {
            color: var(--accent-color);
            border-color: var(--accent-color);
        }

        .btn-outline-accent:hover {
            background-color: var(--accent-color);
            color: white;
        }

        .modal-header {
            background-color: var(--primary-color);
            color: white;
        }

        .modal-content {
            border-radius: var(--border-radius);
            overflow: hidden;
        }

        .default-badge {
            background-color: #28a745;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 50px;
            font-size: 0.75rem;
            margin-left: 0.25rem;
            display: inline-block;
            white-space: nowrap;
        }

        @media (min-width: 768px) {
            .default-badge {
                font-size: 0.8rem;
                margin-left: 0.5rem;
            }
        }

        /* Mobile-specific styles */
        @media (max-width: 767px) {
            .header-container {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start !important;
            }
            
            .header-container .btn {
                width: 100%;
            }
            
            .address-actions .btn {
                flex: 1;
                min-width: 80px;
            }
            
            .modal-dialog {
                margin: 0.5rem;
            }
            
            .modal-body .row {
                margin-left: -5px;
                margin-right: -5px;
            }
            
            .modal-body .col-md-6 {
                padding-left: 5px;
                padding-right: 5px;
            }
            
            .form-label {
                margin-bottom: 0.25rem;
                font-size: 0.9rem;
            }
            
            .form-control, .form-select {
                font-size: 0.9rem;
                padding: 0.375rem 0.5rem;
            }
        }
        
        /* Tablet-specific styles */
        @media (min-width: 768px) and (max-width: 991px) {
            .col-lg-6 {
                flex: 0 0 100%;
                max-width: 100%;
            }
        }
    </style>
</head>

<body>
    <%- include('../partials/user/header') %>
    <div class="account-container">
        <%- include('../partials/user/profileHeader') %>
        <div class="addresses-container">
            <div class="d-flex justify-content-between align-items-center mb-4 header-container">
                <h2>Address Book</h2>
                <button class="btn btn-accent" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                    <i class="fas fa-plus me-2"></i> Add New Address
                </button>
            </div>

            <div class="row g-3">
                <% addresses.forEach(function(address) { %>
                    <div class="col-lg-6 col-md-12 mb-0">
                        <div class="address-card">
                            <div class="address-type <%= address.addressType === 'Home' ? 'address-type-home' : 'address-type-work' %>">
                                <%= address.addressType %>
                            </div>
                            <div class="address-name">
                                <%= address.fullName %>
                                <% if (address.isDefault) { %>
                                    <span class="default-badge">Default</span>
                                <% } %>
                            </div>
                            <div class="address-details">
                                <%= address.address %>
                            </div>
                            <div class="address-details">
                                <%= address.city %>, <%= address.state %>
                                <%= address.pincode %>
                            </div>
                            <div class="address-details">
                                <%= address.country %>
                            </div>
                            <div class="address-details">Phone: <%= address.phone %>
                            </div>
                            <div class="address-actions">
                                <button class="btn btn-sm btn-outline-secondary edit-address"
                                        data-id="<%= address._id %>" data-bs-toggle="modal"
                                        data-bs-target="#editAddressModal">Edit</button>
                                <button class="btn btn-sm btn-outline-danger delete-address"
                                        data-id="<%= address._id %>">Delete</button>
                            </div>
                        </div>
                    </div>
                <% }); %>

                <!-- Add New Address Card -->
                <div class="col-lg-6 col-md-12 mb-0">
                    <div class="add-address-card" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <div class="add-address-icon">
                            <i class="fas fa-plus-circle"></i>
                        </div>
                        <h5>Add New Address</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editAddressForm">
                        <input type="hidden" id="editAddressId" name="addressId">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editFullName" class="form-label">Full Name*</label>
                                <input type="text" class="form-control" id="editFullName" name="fullName">
                            </div>
                            <div class="col-md-6">
                                <label for="editPhone" class="form-label">Phone Number*</label>
                                <input type="tel" class="form-control" id="editPhone" name="phone">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="editAddress" class="form-label">Address*</label>
                            <input type="text" class="form-control" id="editAddress" name="address" >
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCity" class="form-label">City*</label>
                                <input type="text" class="form-control" id="editCity" name="city" >
                            </div>
                            <div class="col-md-6">
                                <label for="editState" class="form-label">State/Province*</label>
                                <input type="text" class="form-control" id="editState" name="state" >
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCountry" class="form-label">Country*</label>
                                <select class="form-select" id="editCountry" name="country" >
                                    <option value="">Select Country</option>
                                    <option value="United States">United States</option>
                                    <option value="Canada">Canada</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Australia">Australia</option>
                                    <option value="India">India</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editPincode" class="form-label">ZIP/Postal Code*</label>
                                <input type="text" class="form-control" id="editPincode" name="pincode" 
                                       pattern="\d{6}" title="Pincode must be exactly 6 digits">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label d-block">Address Type*</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="editTypeHome"
                                       value="Home">
                                <label class="form-check-label" for="editTypeHome">Home</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="editTypeWork"
                                       value="Work">
                                <label class="form-check-label" for="editTypeWork">Work</label>
                            </div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="editIsDefault" name="isDefault">
                            <label class="form-check-label" for="editIsDefault">Set as Default Address</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-accent" onclick="updateAddress()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addAddressForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="fullName" class="form-label">Full Name*</label>
                                <input type="text" class="form-control" id="fullName" name="fullName" >
                            </div>
                            <div class="col-md-6">
                                <label for="phone" class="form-label">Phone Number*</label>
                                <input type="tel" class="form-control" id="phone" name="phone" 
                                       pattern="\d{10}" title="Phone number must be exactly 10 digits">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="address" class="form-label">Address*</label>
                            <input type="text" class="form-control" id="address" name="address" >
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="city" class="form-label">City*</label>
                                <input type="text" class="form-control" id="city" name="city" >
                            </div>
                            <div class="col-md-6">
                                <label for="state" class="form-label">State/Province*</label>
                                <input type="text" class="form-control" id="state" name="state" >
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="country" class="form-label">Country*</label>
                                <select class="form-select" id="country" name="country" >
                                    <option value="">Select Country</option>
                                    <option value="United States">United States</option>
                                    <option value="Canada">Canada</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Australia">Australia</option>
                                    <option value="India">India</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="pincode" class="form-label">ZIP/Postal Code*</label>
                                <input type="text" class="form-control" id="pincode" name="pincode" 
                                       pattern="\d{6}" title="Pincode must be exactly 6 digits">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label d-block">Address Type*</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="typeHome"
                                       value="Home" checked>
                                <label class="form-check-label" for="typeHome">Home</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="addressType" id="typeWork"
                                       value="Work">
                                <label class="form-check-label" for="typeWork">Work</label>
                            </div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="addIsDefault" name="isDefault">
                            <label class="form-check-label" for="addIsDefault">Set as Default Address</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-accent" onclick="saveNewAddress()">Save Address</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Address Modal -->
    <div class="modal fade" id="deleteAddressModal" tabindex="-1" aria-labelledby="deleteAddressModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteAddressModalLabel">Delete Address</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this address? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteAddress">Delete Address</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variable to store delete context
        let deleteContext = null;
    
        // Function to clean up modal backdrops
        function cleanupModalBackdrop() {
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            document.body.classList.remove('modal-open');
            document.body.style = '';
        }
    
        // Function to validate pincode
        function validatePincode(pincode) {
            const pincodeRegex = /^\d{6}$/;
            if (!pincodeRegex.test(pincode)) {
                return 'Pincode must be exactly 6 digits';
            }
            if (pincode === '000000') {
                return 'Pincode cannot be all zeros';
            }
            return null;
        }
    
        // Function to save a new address
        function saveNewAddress() {
            const form = document.getElementById('addAddressForm');
    
            if (form.checkValidity()) {
                const pincode = document.getElementById('pincode').value;
                const pincodeError = validatePincode(pincode);
                if (pincodeError) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Pincode',
                        text: pincodeError
                    });
                    return;
                }
    
                const formData = {
                    fullName: document.getElementById('fullName').value,
                    phone: document.getElementById('phone').value,
                    address: document.getElementById('address').value,
                    city: document.getElementById('city').value,
                    state: document.getElementById('state').value,
                    country: document.getElementById('country').value,
                    pincode: pincode,
                    addressType: document.querySelector('input[name="addressType"]:checked').value,
                    isDefault: document.getElementById('addIsDefault').checked
                };
    
                fetch('/address/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                console.error('Add address error response:', text);
                                throw new Error(`HTTP error! status: ${response.status}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const addressesContainer = document.querySelector('.row');
                            const addNewAddressCard = addressesContainer.querySelector('.add-address-card')?.closest('.col-lg-6');
    
                            const newAddressCol = document.createElement('div');
                            newAddressCol.className = 'col-lg-6 col-md-12 mb-4';
                            newAddressCol.innerHTML = `
                                <div class="address-card">
                                    <div class="address-type ${data.address.addressType === 'Home' ? 'address-type-home' : 'address-type-work'}">
                                        ${data.address.addressType}
                                    </div>
                                    <div class="address-name">
                                        ${data.address.fullName}
                                        ${data.address.isDefault ? '<span class="default-badge">Default</span>' : ''}
                                    </div>
                                    <div class="address-details">${data.address.address}</div>
                                    <div class="address-details">
                                        ${data.address.city}, ${data.address.state} ${data.address.pincode}
                                    </div>
                                    <div class="address-details">${data.address.country}</div>
                                    <div class="address-details">Phone: ${data.address.phone}</div>
                                    <div class="address-actions">
                                        <button class="btn btn-sm btn-outline-secondary edit-address" data-id="${data.address._id}" data-bs-toggle="modal" data-bs-target="#editAddressModal">Edit</button>
                                        <button class="btn btn-sm btn-outline-danger delete-address" data-id="${data.address._id}">Delete</button>
                                    </div>
                                </div>
                            `;
    
                            if (addNewAddressCard) {
                                addressesContainer.insertBefore(newAddressCol, addNewAddressCard);
                            } else {
                                addressesContainer.appendChild(newAddressCol);
                            }
    
                            const addAddressModal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
                            if (addAddressModal) {
                                addAddressModal.hide();
                                cleanupModalBackdrop();
                            }
    
                            // Delay Swal to ensure modal is fully closed
                            setTimeout(() => {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Address Added',
                                    text: 'Your new address has been successfully added.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }, 100);
    
                            form.reset();
                            document.getElementById('typeHome').checked = true;
                            document.getElementById('addIsDefault').checked = false;
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: data.message || 'Failed to add address'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Add address error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while adding the address: ' + error.message
                        });
                    });
            } else {
                form.reportValidity();
            }
        }
    
        // Function to update an existing address
        function updateAddress() {
            const form = document.getElementById('editAddressForm');
    
            if (form.checkValidity()) {
                const pincode = document.getElementById('editPincode').value;
                const pincodeError = validatePincode(pincode);
                if (pincodeError) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Pincode',
                        text: pincodeError
                    });
                    return;
                }
    
                const addressId = document.getElementById('editAddressId').value;
                const formData = {
                    fullName: document.getElementById('editFullName').value,
                    phone: document.getElementById('editPhone').value,
                    address: document.getElementById('editAddress').value,
                    city: document.getElementById('editCity').value,
                    state: document.getElementById('editState').value,
                    country: document.getElementById('editCountry').value,
                    pincode: pincode,
                    addressType: document.querySelector('input[name="addressType"]:checked').value,
                    isDefault: document.getElementById('editIsDefault').checked
                };
    
                fetch(`/update-address/${addressId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                console.error('Update address error response:', text);
                                throw new Error(`HTTP error! status: ${response.status}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const addressCard = document.querySelector(`.edit-address[data-id="${addressId}"]`)?.closest('.address-card');
                            if (addressCard) {
                                addressCard.querySelector('.address-type').textContent = data.address.addressType;
                                addressCard.querySelector('.address-type').className = `address-type ${data.address.addressType === 'Home' ? 'address-type-home' : 'address-type-work'}`;
                                const nameElement = addressCard.querySelector('.address-name');
                                nameElement.innerHTML = `${data.address.fullName}${data.address.isDefault ? ' <span class="default-badge">Default</span>' : ''}`;
                                const details = addressCard.querySelectorAll('.address-details');
                                details[0].textContent = data.address.address;
                                details[1].textContent = `${data.address.city}, ${data.address.state} ${data.address.pincode}`;
                                details[2].textContent = data.address.country;
                                details[3].textContent = `Phone: ${data.address.phone}`;
    
                                if (data.address.isDefault) {
                                    document.querySelectorAll('.address-card .default-badge').forEach(badge => {
                                        if (badge.closest('.address-card') !== addressCard) {
                                            badge.remove();
                                        }
                                    });
                                }
                            }
    
                            const editAddressModal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                            if (editAddressModal) {
                                editAddressModal.hide();
                                cleanupModalBackdrop();
                            }
    
                            // Delay Swal to ensure modal is fully closed
                            setTimeout(() => {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Address Updated',
                                    text: 'Your address has been successfully updated.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }, 100);
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: data.message || 'Failed to update address'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Update address error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while updating the address: ' + error.message
                        });
                    });
            } else {
                form.reportValidity();
            }
        }
    
        // Event listeners
        document.addEventListener('DOMContentLoaded', function () {
            // Edit Address
            document.querySelector('.row').addEventListener('click', function (event) {
                const editBtn = event.target.closest('.edit-address');
                if (editBtn) {
                    const addressId = editBtn.getAttribute('data-id');
                    console.log('Fetching address:', addressId);
    
                    fetch(`/user/addresses/${addressId}`)
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(text => {
                                    console.error('Fetch address error response:', text);
                                    throw new Error(`HTTP error! status: ${response.status}`);
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                const address = data.address;
                                document.getElementById('editAddressId').value = address._id;
                                document.getElementById('editFullName').value = address.fullName;
                                document.getElementById('editPhone').value = address.phone;
                                document.getElementById('editAddress').value = address.address;
                                document.getElementById('editCity').value = address.city;
                                document.getElementById('editState').value = address.state;
                                document.getElementById('editCountry').value = address.country;
                                document.getElementById('editPincode').value = address.pincode;
                                document.getElementById('editTypeHome').checked = address.addressType === 'Home';
                                document.getElementById('editTypeWork').checked = address.addressType === 'Work';
                                document.getElementById('editIsDefault').checked = address.isDefault;
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: data.message || 'Failed to load address details'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Fetch address error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Failed to load address details: ' + error.message
                            });
                        });
                }
            });
    
            // Delete Address - Show Modal
            document.querySelector('.row').addEventListener('click', function (event) {
                const deleteBtn = event.target.closest('.delete-address');
                if (deleteBtn) {
                    deleteContext = {
                        id: deleteBtn.getAttribute('data-id'),
                        card: deleteBtn.closest('.col-lg-6')
                    };
                    if (!deleteContext.id || !deleteContext.card) {
                        console.error('Delete: Invalid context', deleteContext);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Invalid address selected.'
                        });
                        return;
                    }
                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteAddressModal'));
                    deleteModal.show();
                }
            });
    
            // Confirm Delete
            document.getElementById('confirmDeleteAddress').addEventListener('click', function () {
                if (!deleteContext || !deleteContext.id || !deleteContext.card) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'No address selected for deletion.'
                    });
                    const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteAddressModal'));
                    if (deleteModal) {
                        deleteModal.hide();
                        cleanupModalBackdrop();
                    }
                    deleteContext = null;
                    return;
                }
    
                const confirmBtn = document.getElementById('confirmDeleteAddress');
                confirmBtn.disabled = true;
    
                fetch(`/delete-address/${deleteContext.id}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                console.error('Delete address error response:', text);
                                throw new Error(`HTTP error! status: ${response.status}: ${text}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            if (deleteContext.card && deleteContext.card.parentNode) {
                                deleteContext.card.remove();
                            }
    
                            const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteAddressModal'));
                            if (deleteModal) {
                                deleteModal.hide();
                                cleanupModalBackdrop();
                            }
    
                            setTimeout(() => {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: 'The address has been deleted.',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                            }, 100);
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: data.message || 'Failed to delete address'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Delete address error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while deleting the address: ' + error.message
                        });
                    })
                    .finally(() => {
                        confirmBtn.disabled = false;
                        deleteContext = null;
                    });
            });
    
            // Handle modal hidden to reset focus
            document.getElementById('addAddressModal').addEventListener('hidden.bs.modal', cleanupModalBackdrop);
            document.getElementById('editAddressModal').addEventListener('hidden.bs.modal', cleanupModalBackdrop);
            document.getElementById('deleteAddressModal').addEventListener('hidden.bs.modal', function () {
                cleanupModalBackdrop();
                document.querySelector('.addresses-container').focus();
            });
        });
    </script>
</body>

</html>