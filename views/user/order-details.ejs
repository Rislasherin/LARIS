<!-- views/user/orderDetails.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Order Details</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      :root {
        --primary-color: black;
        --secondary-color: #e9ecef;
        --accent-color: #fd7e14;
        --light-color: #f8f9fa;
        --dark-color: #343a40;
        --text-color: #212529;
      }

      body {
        background-color: #f2f2f2;
        font-family: "Poppins", sans-serif;
        color: var(--text-color);
      }

      .order-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        padding: 1.5rem;
        margin-top: -1.8rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(0, 0, 0, 0.05);
      }

      .order-header {
        border-bottom: 1px solid var(--secondary-color);
        padding-bottom: 1rem;
        margin-bottom: 1.5rem;
      }

      .order-id {
        color: var(--primary-color);
        font-weight: 600;
      }

      .status-badge {
        padding: 0.35rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .status-pending {
        background-color: #fff3cd;
        color: #856404;
      }

      .status-processing {
        background-color: #cce5ff;
        color: #004085;
      }

      .status-shipped {
        background-color: #d1ecf1;
        color: #0c5460;
      }

      .status-delivered {
        background-color: #d4edda;
        color: #155724;
      }

      .status-cancelled {
        background-color: #f8d7da;
        color: #721c24;
      }

      .status-refund-pending {
        background-color: #ffe8cc;
        color: #804200;
      }

      .status-refunded {
        background-color: #d1f7d3;
        color: #0b5711;
      }

      .product-card {
        border: none;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        background-color: var(--light-color);
      }

      .product-card:hover {
        box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
      }

      .product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 4px;
        border: 1px solid var(--secondary-color);
      }

      .product-details {
        flex-grow: 1;
      }

      .product-name {
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 0.25rem;
      }

      .product-price {
        color: var(--text-color);
        font-weight: 500;
      }

      .product-quantity {
        color: #6c757d;
        font-size: 0.9rem;
      }

      .order-info-panel {
        background-color: var(--light-color);
        border-radius: 8px;
        padding: 1.25rem;
        margin-bottom: 1.5rem;
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.05);
      }

      .info-title {
        color: var(--primary-color);
        font-weight: 600;
        margin-bottom: 1rem;
        font-size: 1.1rem;
        border-bottom: 2px solid var(--primary-color);
        display: inline-block;
        padding-bottom: 0.25rem;
      }

      .payment-method-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        background-color: white;
        border: 1px solid var(--secondary-color);
        border-radius: 4px;
        font-weight: 500;
      }

      .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
      }

      .summary-total {
        font-weight: 700;
        color: var(--primary-color);
        font-size: 1.1rem;
        border-top: 1px solid var(--secondary-color);
        padding-top: 0.75rem;
        margin-top: 0.75rem;
      }

      .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        border-radius: 4px;
        font-weight: 500;
        padding: 0.5rem 1.25rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-size: 0.85rem;
      }

      .btn-primary:hover {
        background-color: #333;
        border-color: #333;
        transform: translateY(-1px);
        box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
      }

      .btn-outline-danger {
        color: #dc3545;
        border-color: #dc3545;
        border-radius: 4px;
        font-weight: 500;
        font-size: 0.75rem;
        padding: 0.25rem 0.75rem;
      }

      .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
        transform: translateY(-1px);
        box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
      }

      .order-tabs {
        margin-bottom: 1.5rem;
      }

      .nav-tabs {
        border-bottom: 1px solid #dee2e6;
      }

      .nav-tabs .nav-link {
        margin-bottom: -1px;
        border: 1px solid transparent;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
        font-weight: 500;
        color: #6c757d;
        padding: 0.5rem 1rem;
      }

      .nav-tabs .nav-link:hover {
        border-color: #e9ecef #e9ecef #dee2e6;
      }

      .nav-tabs .nav-link.active {
        color: var(--primary-color);
        background-color: #fff;
        border-color: #dee2e6 #dee2e6 #fff;
        font-weight: 600;
      }

      @media (max-width: 767.98px) {
        .order-container {
          padding: 1rem;
        }

        .product-image {
          width: 60px;
          height: 60px;
        }

        .info-title {
          font-size: 1rem;
        }
      }

      .timeline-compact {
        position: relative;
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
        padding-top: 1rem;
      }

      .timeline-step {
        position: relative;
        text-align: center;
        flex: 1;
      }

      .timeline-step::before {
  content: '';
  position: absolute;
  top: 15px;
  left: calc(50% + 15px);
  right: 50%;
  height: 2px;
  background-color: var(--secondary-color);
  z-index: 1;
}

.timeline-step:last-child::before {
  display: none;
}

.timeline-step.completed::before {
  background-color: #28a745; /* Green for completed */
}

.timeline-dot {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background-color: var(--secondary-color);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 10px;
  position: relative;
  z-index: 2;
}

.timeline-step.completed .timeline-dot {
  background-color: #28a745; /* Green for completed */
  color: white;
}

.timeline-step.current .timeline-dot {
  background-color: var(--accent-color); /* Orange for active/current */
  color: white;
  border: 2px solid #fff; /* Optional: Add a white border to make it stand out */
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2); /* Optional: Add a shadow for emphasis */
}

.timeline-label {
  font-size: 0.75rem;
  color: #6c757d;
  max-width: 80px;
  margin: 0 auto;
}

.timeline-step.completed .timeline-label {
  color: var(--text-color);
  font-weight: 500;
}

.timeline-step.current .timeline-label {
  color: var(--accent-color); /* Match the active color */
  font-weight: 600;
}

      .refund-status {
        margin-top: 1rem;
      }

      .refund-badge {
        padding: 0.35rem 0.75rem;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 600;
        display: inline-block;
      }
    </style>
  </head>
  <body>
    <%- include('../partials/user/header') %> <%-
    include('../partials/user/profileHeader') %>

    <div class="container">
      <div class="order-container">
        <!-- Order Header -->
        <div class="order-header">
          <div class="row align-items-center">
            <div class="col-md-6">
              <div class="d-flex align-items-center">
                <span class="order-id me-3">Order #<%= order.orderID %></span>
                <span class="status-badge <%= order.orderStatus === 'Shipped' || order.orderStatus === 'Delivered' ? 'status-shipped' : order.orderStatus === 'Pending' ? 'status-pending' : order.orderStatus === 'Cancelled' ? 'status-cancelled' : 'status-processing' %>">
                  <%= order.orderStatus %>
                </span>
              </div>
              <p class="text-muted mb-0 mt-1">Placed on <%= order.orderDate.toLocaleDateString() %></p>
            </div>
            <div class="col-md-6 text-md-end mt-3 mt-md-0">
              <% if (order.paymentStatus === 'Pending') { %>
              <button onclick="payNow('<%= order._id %>', '<%= order.shippingAddress._id %>')" class="btn btn-primary">
                <i class="fas fa-credit-card me-2"></i> Pay Now
              </button>
              <% } %>
              <% if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Delivered' && !order.products.every(p => ['Cancelled', 'Delivered', 'Cancellation Requested', 'Returned'].includes(p.productStatus))) { %>
              <button type="button" class="btn btn-outline-danger ms-2" data-bs-toggle="modal" data-bs-target="#cancelOrderModal" data-order-id="<%= order._id %>" data-action="cancel-order">
                <i class="fas fa-ban me-1"></i> Cancel Order
              </button>
              <% } %>
            </div>
          </div>
        </div>

<!-- Order Timeline -->
<div class="mb-4">
  <div class="timeline-compact">
    <% order.timeline.forEach(step => { %>
    <div class="timeline-step <%= step.completed ? 'completed' : '' %> <%= step.current ? 'current' : '' %>">
      <div class="timeline-dot">
        <i class="fas <%= step.title === 'Order Placed' ? 'fa-check' : step.title === 'Processing' ? 'fa-cog' : step.title === 'Shipped' ? 'fa-shipping-fast' : 'fa-home' %> fa-sm"></i>
      </div>
      <div class="timeline-label"><%= step.title %></div>
    </div>
    <% }) %>
  </div>
</div>

        <!-- Order Tabs -->
        <div class="order-tabs">
          <ul class="nav nav-tabs" id="orderTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="products-tab" data-bs-toggle="tab" data-bs-target="#products" type="button" role="tab" aria-controls="products" aria-selected="true">Products</button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab" aria-controls="details" aria-selected="false">Order Details</button>
            </li>
          </ul>
          <div class="tab-content" id="orderTabsContent">
            <div class="tab-pane fade show active" id="products" role="tabpanel" aria-labelledby="products-tab">
              <!-- Products List -->
              <div class="mt-3">
                <% order.products.forEach(product => { %>
                  <div class="product-card">
                      <div class="d-flex flex-column flex-md-row">
                          <div class="me-md-3 mb-3 mb-md-0 text-center">
                              <img
                                  src="<%= product.image %>"
                                  alt="<%= product.name %>"
                                  class="product-image"
                              />
                          </div>
                          <div class="product-details">
                              <div class="d-flex justify-content-between align-items-start mb-2">
                                  <div>
                                      <h6 class="product-name"><%= product.name %></h6>
                                      <p class="product-price mb-1">
                                          ₹<%= product.price.toFixed(2) %>
                                          <small>(x<%= product.quantity %>)</small>
                                      </p>
                                      <% if (product.offerDiscount > 0) { %>
                                      <p class="mb-1 text-success">
                                          <i class="fas fa-tag me-1"></i> <%= product.offerName %> (-₹<%= product.offerDiscount.toFixed(2) %>)
                                      </p>
                                      <% } %>
                                      <p class="product-quantity mb-1">
                                          Subtotal: ₹<%= (product.price * product.quantity - (product.offerDiscount || 0)).toFixed(2) %>
                                      </p>
                                      <p class="mb-0">
                                          <span class="status-badge <%= product.productStatus === 'Shipped' || product.productStatus === 'Delivered' ? 'status-shipped' : product.productStatus === 'Cancelled' ? 'status-cancelled' : product.productStatus === 'Cancellation Requested' ? 'status-pending' : product.productStatus === 'Return Requested' ? 'status-pending' : product.productStatus === 'Returned' ? 'status-delivered' : 'status-pending' %>">
                                              <i class="fas <%= product.productStatus === 'Delivered' ? 'fa-check-circle' : product.productStatus === 'Shipped' ? 'fa-shipping-fast' : product.productStatus === 'Cancelled' ? 'fa-ban' : product.productStatus === 'Cancellation Requested' ? 'fa-hourglass-half' : product.productStatus === 'Return Requested' ? 'fa-undo' : product.productStatus === 'Returned' ? 'fa-check-circle' : 'fa-clock' %> me-1"></i>
                                              <%= product.productStatus %>
                                          </span>
                                      </p>
                                  </div>
                                  <div class="d-none d-md-block">
                                      <% if (product.productStatus !== "Cancelled" &&
                                          product.productStatus !== "Delivered" &&
                                          product.productStatus !== "Cancellation Requested" &&
                                          product.productStatus !== "Return Requested" &&
                                          product.productStatus !== "Returned") { %>
                                      <button
                                          type="button"
                                          class="btn btn-sm btn-outline-danger cancel-product-btn"
                                          data-bs-toggle="modal"
                                          data-bs-target="#cancelOrderModal"
                                          data-order-id="<%= order._id %>"
                                          data-product-id="<%= product._id %>"
                                          data-action="cancel"
                                          data-status="<%= product.productStatus %>"
                                      >
                                          <i class="fas fa-ban me-1"></i> Cancel
                                      </button>
                                      <% } %>
                                      <% if (product.productStatus === "Delivered" && product.canReturn) { %>
                                      <button
                                          type="button"
                                          class="btn btn-sm btn-outline-danger return-product-btn"
                                          data-bs-toggle="modal"
                                          data-bs-target="#cancelOrderModal"
                                          data-order-id="<%= order._id %>"
                                          data-product-id="<%= product._id %>"
                                          data-action="return"
                                          data-status="<%= product.productStatus %>"
                                      >
                                          <i class="fas fa-undo me-1"></i> Return
                                      </button>
                                      <% } %>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
                  <% }) %>
              </div>
            </div>
            
            <div class="tab-pane fade" id="details" role="tabpanel" aria-labelledby="details-tab">
              <div class="row mt-3">
                <div class="col-md-6">
                  <!-- Shipping Information -->
                  <div class="order-info-panel">
                    <h5 class="info-title">
                      <i class="fas fa-map-marker-alt me-2"></i>Shipping Address
                    </h5>
                    <p class="mb-1">
                      <strong><%= order.shippingAddress.fullName %></strong>
                    </p>
                    <p class="mb-1"><%= order.shippingAddress.address %></p>
                    <p class="mb-1">
                      <%= order.shippingAddress.city %>, <%=
                      order.shippingAddress.state %> <%= order.shippingAddress.pincode
                      %>
                    </p>
                    <p class="mb-1"><%= order.shippingAddress.country %></p>
                    <p class="mb-0">
                      <i class="fas fa-phone-alt me-2"></i><%=
                      order.shippingAddress.phone %>
                    </p>
                  </div>

                  <!-- Payment Information -->
                  <div class="order-info-panel">
                    <h5 class="info-title">
                      <i class="fas fa-credit-card me-2"></i>Payment Information
                    </h5>
                    <div class="mb-3">
                      <p class="mb-1"><strong>Payment Method:</strong></p>
                      <span class="payment-method-badge">
                        <i class="fas <%= order.paymentMethod === 'Credit Card' ? 'fa-credit-card' : order.paymentMethod === 'PayPal' ? 'fa-paypal' : order.paymentMethod === 'Razorpay' ? 'fa-wallet' : 'fa-money-bill-wave' %> me-2"></i>
                        <%= order.paymentMethod %>
                      </span>
                    </div>
                    <p class="mb-1"><strong>Payment Status:</strong></p>
                    <p class="mb-2">
                      <span class="status-badge <%= order.paymentStatus === 'Paid' ? 'status-delivered' : 'status-pending' %>">
                        <i class="fas <%= order.paymentStatus === 'Paid' ? 'fa-check-circle' : 'fa-clock' %> me-1"></i>
                        <%= order.paymentStatus %>
                      </span>
                    </p>
                    
                    <% if (order.refundStatus && order.refundStatus !== 'Not Applicable') { %>
                    <div class="refund-status">
                      <p class="mb-1"><strong>Refund Status:</strong></p>
                      <p class="mb-0">
                        <span class="refund-badge <%= order.refundStatus === 'Pending' ? 'status-refund-pending' : order.refundStatus === 'Processed' || order.refundStatus === 'Partially Processed' ? 'status-refunded' : 'status-pending' %>">
                          <i class="fas <%= order.refundStatus === 'Processed' ? 'fa-check-circle' : 'fa-hourglass-half' %> me-1"></i>
                          <%= order.refundStatus %>
                        </span>
                      </p>
                    </div>
                    <% } %>
                    
                    <% if (order.transactionId) { %>
                    <p class="mb-1 mt-2"><strong>Transaction ID:</strong></p>
                    <p class="mb-0"><%= order.transactionId %></p>
                    <% } %>
                  </div>
                </div>
                
                <div class="col-md-6">
                  <!-- Order Summary -->
                  <div class="order-info-panel">
                    <h5 class="info-title">
                      <i class="fas fa-receipt me-2"></i>Order Summary
                    </h5>
                    <div class="summary-row">
                      <span>Original Amount</span>
                      <span>₹<%= order.originalAmount.toFixed(2) %></span>
                    </div>
                    <div class="summary-row">
                      <span>Total Offer Discount</span>
                      <span>-₹<%= order.offerDiscount.toFixed(2) %></span>
                    </div>
                    <div class="summary-row">
                      <span>Coupon <%= order.couponCode && order.couponCode !== 'N/A' ? `(${order.couponCode})` : '' %></span>
                      <span>-₹<%= order.couponDiscount.toFixed(2) %></span>
                    </div>
                    <div class="summary-row">
                      <span>Subtotal</span>
                      <span>₹<%= order.subtotal.toFixed(2) %></span>
                    </div>
                    <div class="summary-row">
                      <span>Shipping</span>
                      <span>₹<%= order.shipping.toFixed(2) %></span>
                    </div>
                    <div class="summary-row">
                      <span>Tax</span>
                      <span>₹<%= order.tax.toFixed(2) %></span>
                    </div>
                    <div class="summary-row summary-total">
                      <span>Total</span>
                      <span>₹<%= order.totalAmount.toFixed(2) %></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Cancel/Return Modal -->
    <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Product</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="cancelForm">
              <input type="hidden" id="orderId" name="orderId" />
              <input type="hidden" id="productId" name="productId" />
              <input type="hidden" id="actionType" name="actionType" />
    
              <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <span id="alertText">Your cancellation request will be processed instantly if approved.</span>
              </div>
    
              <p>Order #<span id="modalOrderId"></span></p>
    
              <div class="mb-3">
                <label for="cancelReason" id="reasonLabel" class="form-label">Please select a reason for cancellation (optional)</label>
                <select class="form-select" id="cancelReason" name="cancelReason">
                  <option value="">-- No reason provided --</option>
                  <option value="Changed mind">Changed my mind</option>
                  <option value="Found better price">Found better price elsewhere</option>
                  <option value="Delivery too slow">Delivery taking too long</option>
                  <option value="Ordered by mistake">Ordered by mistake</option>
                  <option value="Product not needed">Product no longer needed</option>
                  <option value="Other">Other</option>
                </select>
              </div>
    
              <div class="mb-3 d-none" id="otherReasonContainer">
                <label for="otherReason" class="form-label">Please specify your reason (optional)</label>
                <textarea class="form-control" id="otherReason" name="otherReason" rows="3"></textarea>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-danger" id="confirmCancelBtn">Confirm</button>
          </div>
        </div>
      </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
      function payNow(orderId, addressId) {
        console.log(
          "payNow - Starting for Order ID:",
          orderId,
          "Address ID:",
          addressId
        );
        if (!addressId) {
          console.error("payNow - No addressId provided");
          Swal.fire({
            title: "Error",
            text: "Address ID is missing.",
            icon: "error",
            confirmButtonText: "OK",
          });
          return;
        }
        fetch("/user/create-order-from-existing", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ orderId: orderId }),
        })
          .then((response) => {
            console.log("payNow - Fetch response status:", response.status);
            return response.json();
          })
          .then((result) => {
            console.log("payNow - Server response:", result);
            if (result.success && result.orderId) {
              const options = {
                key: result.key,
                amount: result.amount,
                currency: result.currency,
                order_id: result.orderId,
                name: "Supreme",
                description: "Complete Order Payment",
                handler: function (response) {
                  console.log("payNow - Razorpay payment response:", response);
                  fetch("/user/verify-payment-from-existing", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                      razorpay_order_id: response.razorpay_order_id,
                      razorpay_payment_id: response.razorpay_payment_id,
                      razorpay_signature: response.razorpay_signature,
                      orderId: orderId,
                    }),
                  })
                    .then((res) => res.json())
                    .then((verifyResult) => {
                      console.log(
                        "payNow - Verification result:",
                        verifyResult
                      );
                      if (verifyResult.success) {
                        window.location.href = `/user/order-success/${orderId}`;
                      } else {
                        window.location.href = `/user/order-failure/${orderId}`;
                      }
                    })
                    .catch((error) => {
                      console.error("payNow - Verification error:", error);
                      Swal.fire({
                        title: "Payment Error",
                        text: "There was an error verifying your payment. Please try again.",
                        icon: "error",
                        confirmButtonText: "OK"
                      });
                    });
                },
                prefill: {
                  name: "<%= order.shippingAddress.fullName %>",
                  email: "<%= user.email %>",
                  contact: "<%= order.shippingAddress.phone %>"
                },
                theme: {
                  color: "#212529"
                }
              };
              
              const razorpay = new Razorpay(options);
              razorpay.open();
            } else {
              Swal.fire({
                title: "Error",
                text: result.message || "Failed to create payment. Please try again.",
                icon: "error",
                confirmButtonText: "OK"
              });
            }
          })
          .catch((error) => {
            console.error("payNow - Error:", error);
            Swal.fire({
              title: "Error",
              text: "There was an error processing your request. Please try again.",
              icon: "error",
              confirmButtonText: "OK"
            });
          });
      }

      document.addEventListener('DOMContentLoaded', function() {
        const cancelOrderModal = document.getElementById('cancelOrderModal');
        const cancelForm = document.getElementById('cancelForm');
        const confirmCancelBtn = document.getElementById('confirmCancelBtn');
        const cancelReason = document.getElementById('cancelReason');
        const otherReasonContainer = document.getElementById('otherReasonContainer');
        const reasonLabel = document.getElementById('reasonLabel');
        const alertText = document.getElementById('alertText');
        const modalTitle = document.getElementById('cancelOrderModalLabel');
        
        // Show/hide "Other" reason text area
        cancelReason.addEventListener('change', function() {
          if (this.value === 'Other') {
            otherReasonContainer.classList.remove('d-none');
          } else {
            otherReasonContainer.classList.add('d-none');
          }
        });
        
        // Handle modal open
        cancelOrderModal.addEventListener('show.bs.modal', function(event) {
          const button = event.relatedTarget;
          const orderId = button.getAttribute('data-order-id');
          const productId = button.getAttribute('data-product-id');
          const action = button.getAttribute('data-action');
          const status = button.getAttribute('data-status');
          
          document.getElementById('orderId').value = orderId;
          document.getElementById('productId').value = productId || '';
          document.getElementById('actionType').value = action;
          document.getElementById('modalOrderId').textContent = orderId;
          
          // Update modal based on action type
          if (action === 'return') {
            modalTitle.textContent = 'Return Product';
            reasonLabel.textContent = 'Please select a reason for return';
            alertText.textContent = 'Your return request will be processed within 48 hours if approved.';
            
            // Update return reason options
            cancelReason.innerHTML = `
              <option value="">-- No reason provided --</option>
              <option value="Defective product">Defective product</option>
              <option value="Wrong product">Wrong product delivered</option>
              <option value="Product damaged">Product damaged</option>
              <option value="Not as described">Product not as described</option>
              <option value="Changed mind">Changed my mind</option>
              <option value="Other">Other</option>
            `;
          } else if (action === 'cancel-order') {
            modalTitle.textContent = 'Cancel Order';
            reasonLabel.textContent = 'Please select a reason for cancellation';
            alertText.textContent = 'Your order cancellation request will be processed instantly if approved.';
            
            // Reset to default cancel options
            cancelReason.innerHTML = `
              <option value="">-- No reason provided --</option>
              <option value="Changed mind">Changed my mind</option>
              <option value="Found better price">Found better price elsewhere</option>
              <option value="Delivery too slow">Delivery taking too long</option>
              <option value="Ordered by mistake">Ordered by mistake</option>
              <option value="Product not needed">Product no longer needed</option>
              <option value="Other">Other</option>
            `;
          } else {
            modalTitle.textContent = 'Cancel Product';
            reasonLabel.textContent = 'Please select a reason for cancellation';
            alertText.textContent = 'Your cancellation request will be processed instantly if approved.';
            
            // Reset to default cancel options
            cancelReason.innerHTML = `
              <option value="">-- No reason provided --</option>
              <option value="Changed mind">Changed my mind</option>
              <option value="Found better price">Found better price elsewhere</option>
              <option value="Delivery too slow">Delivery taking too long</option>
              <option value="Ordered by mistake">Ordered by mistake</option>
              <option value="Product not needed">Product no longer needed</option>
              <option value="Other">Other</option>
            `;
          }
        });
        
        confirmCancelBtn.addEventListener('click', function() {
  const orderId = document.getElementById('orderId').value;
  const productId = document.getElementById('productId').value;
  const actionType = document.getElementById('actionType').value;
  const reason = document.getElementById('cancelReason').value;
  const otherReason = document.getElementById('otherReason').value;

  const finalReason = reason === 'Other' ? otherReason : reason;

  let endpoint = '';
  let requestData = {};

  if (actionType === 'cancel-order') {
    endpoint = `/user/order/cancel-order/${orderId}`; // Matches router.post('/order/cancel-order/:orderId')
    requestData = { reason: finalReason };
  } else if (actionType === 'cancel') {
    endpoint = `/user/order/cancel-product/${orderId}/${productId}`; // Matches router.post('/order/cancel-product/:orderId/:productId')
    requestData = { reason: finalReason };
  } else if (actionType === 'return') {
    endpoint = '/user/return'; // Matches router.post('/return')
    requestData = { orderId, productId, reason: finalReason };
  }

  console.log('Fetching endpoint:', endpoint); // Debug log to confirm URL

  fetch(endpoint, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(requestData)
  })
    .then(response => {
      console.log('Response status:', response.status); // Debug log
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(result => {
      const modal = bootstrap.Modal.getInstance(cancelOrderModal);
      modal.hide();

      if (result.success) {
        Swal.fire({
          title: 'Success',
          text: result.message,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire({
          title: 'Error',
          text: result.message || 'An error occurred. Please try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    })
    .catch(error => {
      console.error('Fetch Error:', error);
      Swal.fire({
        title: 'Error',
        text: 'There was an error processing your request. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    });
});
      });
    </script>
  
  </body>
</html>