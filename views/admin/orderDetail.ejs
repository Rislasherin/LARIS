<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Order Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <!-- Add SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            background-color: #1a1a2e;
            color: #e6e6e6;
            font-size: 0.9rem;
            font-family: "Arial", sans-serif;
        }
        .card {
            background-color: #1e293b;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .status-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        .tab-button {
            padding: 0.5rem 1rem;
            transition: all 0.2s ease;
        }
        .tab-button.active {
            background-color: #1e293b;
            border-bottom: 2px solid #3b82f6;
        }
        .product-item {
            transition: background-color 0.2s ease;
        }
        .product-item:hover {
            background-color: #2d3748;
        }
        .group:hover .group-hover\:block {
            display: block;
        }
        .disabled-option {
            opacity: 0.5;
            pointer-events: none;
            background-color: #4a5568;
        }
        @media (max-width: 640px) {
            .product-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            .group-hover\:block {
                display: none !important;
            }
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200">
    <div class="flex min-h-screen">
        <div class="bg-gray-800 p-4">
            <%- include('../partials/admin/header') %>
        </div>
        <div class="flex-1 p-6">
            <div class="flex items-center justify-between mb-6">
                <a href="/admin/orders" class="flex items-center text-blue-400 hover:text-blue-300">
                    <i class="fas fa-arrow-left mr-2"></i> Back to Orders
                </a>
            </div>
            <div class="card mb-6">
                <div class="p-4 border-b border-gray-700 flex justify-between items-center">
                    <h2 class="text-lg font-semibold text-white">Order Summary</h2>
                    <span class="status-badge bg-<%= order.status === 'Delivered' ? 'green' : order.status === 'Cancelled' ? 'red' : order.status === 'Returned' ? 'purple' : 'yellow' %>-500 text-white">
                        <%= order.status %>
                    </span>
                </div>
                <div class="p-4 grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                        <h3 class="text-sm uppercase text-gray-400 mb-2">Order Info</h3>
                        <p><span class="text-gray-500">Date:</span> <%= new Date(order.createdAt).toLocaleDateString() %></p>
                        <p><span class="text-gray-500">Customer:</span> <%= order.user ? order.user.name : 'Unknown' %></p>
                        <p><span class="text-gray-500">Email:</span> <%= order.user ? order.user.email : 'N/A' %></p>
                    </div>
                    <div>
                        <h3 class="text-sm uppercase text-gray-400 mb-2">Payment</h3>
                        <p><span class="text-gray-500">Method:</span> <%= order.paymentMethod %></p>
                        <p><span class="text-gray-500">Status:</span> <%= order.paymentStatus || order.status %></p>
                        <p><span class="text-gray-500">Refund:</span> 
                            <span class="status-badge bg-<%= order.refundStatus === 'Processed' ? 'green' : order.refundStatus === 'Partially Processed' ? 'blue' : 'gray' %>-500 text-white">
                                <%= order.refundStatus || 'Not Applicable' %>
                            </span>
                        </p>
                        <p><span class="text-gray-500">Total:</span> <span class="font-semibold">₹<%= order.finalAmount.toFixed(2) %></span></p>
                    </div>
                    <div>
                        <h3 class="text-sm uppercase text-gray-400 mb-2">Shipping</h3>
                        <p><span class="text-gray-500">Name:</span> <%= order.address ? order.address.fullName : 'N/A' %></p>
                        <p><span class="text-gray-500">Address:</span> <%= order.address ? order.address.address : 'N/A' %></p>
                        <p><span class="text-gray-500">Location:</span> <%= order.address ? `${order.address.city}, ${order.address.pincode}` : 'N/A' %></p>
                    </div>
                </div>
            </div>
            <div class="mb-6 border-b border-gray-700">
                <div class="flex space-x-2">
                    <button class="tab-button active text-white" data-tab="products">Products</button>
                </div>
            </div>
            <div class="tab-content">
                <div id="products-tab" class="tab-pane active">
                    <div class="card mb-6">
                        <div class="p-4 border-b border-gray-700 flex justify-between items-center">
                            <h2 class="text-lg font-semibold text-white">Order Items</h2>
                            <div class="flex items-center gap-4">
                                <select id="globalStatus" class="bg-gray-700 text-white text-xs p-2 rounded-lg border border-gray-600">
                                    <option value="Pending">Pending</option>
                                    <option value="Processing">Processing</option>
                                    <option value="Shipped">Shipped</option>
                                    <option value="Delivered">Delivered</option>
                                    <option value="Cancelled">Cancelled</option>
                                </select>
                                <button id="updateAllStatus" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                                    <i class="fas fa-save mr-2"></i> Update All
                                </button>
                            </div>
                        </div>
                        <div class="divide-y divide-gray-700">
                            <% order.orderItems.forEach((item) => { %>
                                <div class="product-item p-4 flex items-center gap-4" data-product-id="<%= item._id %>">
                                    <div class="relative w-20 h-20 flex-shrink-0 group">
                                        <img 
                                            src="/uploads/product-images/<%= item.displayImage %>" 
                                            alt="<%= item.displayName || 'Product' %>" 
                                            class="w-full h-full object-cover rounded-md"
                                            onerror="this.src='/default-image.jpg'"
                                        >
                                        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 rounded-md"></div>
                                    </div>
                                    <div class="flex-1">
                                        <div class="flex flex-col">
                                            <h3 class="font-medium text-white text-base mb-1"><%= item.displayName %></h3>
                                            <div class="flex flex-wrap gap-x-4 gap-y-1 text-sm text-gray-400">
                                                <p>₹<%= item.price.toFixed(2) %> × <%= item.quantity %></p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="flex flex-col items-end gap-2">
                                        <span class="product-status-badge status-badge bg-<%= 
                                            item.status === 'Delivered' ? 'green' : 
                                            item.status === 'Cancelled' ? 'red' : 
                                            item.status === 'Return Requested' ? 'orange' : 
                                            item.status === 'Returned' ? 'purple' : 
                                            'yellow' %>-500 text-white text-xs px-2 py-1 rounded-full">
                                            <%= item.status %>
                                        </span>
                                        <span class="font-medium text-white">₹<%= (item.price * item.quantity).toFixed(2) %></span>
                                        <% if (item.status === 'Return Requested') { %>
                                            <div class="flex gap-2 mt-1">
                                                <button class="accept-return-btn bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1 rounded-lg" 
                                                        data-product-id="<%= item._id %>"
                                                        data-order-id="<%= order._id %>">
                                                    Accept
                                                </button>
                                                <button class="reject-return-btn bg-red-600 hover:bg-red-700 text-white text-xs px-3 py-1 rounded-lg" 
                                                        data-product-id="<%= item._id %>"
                                                        data-order-id="<%= order._id %>">
                                                    Reject
                                                </button>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function updateItemStatus(productId, status, bgClass) {
                const item = document.querySelector(`.product-item[data-product-id="${productId}"]`);
                const badge = item.querySelector('.product-status-badge');
                badge.textContent = status;
                badge.className = `product-status-badge status-badge ${bgClass} text-white text-xs px-2 py-1 rounded-full`;
                const buttons = item.querySelectorAll('.accept-return-btn, .reject-return-btn');
                buttons.forEach(btn => btn.remove());
            }

            function updateStatusDropdown() {
                const select = document.getElementById('globalStatus');
                const items = Array.from(document.querySelectorAll('.product-status-badge'));
                const anyDelivered = items.some(badge => badge.textContent.trim() === 'Delivered');
                const allDelivered = items.every(badge => badge.textContent.trim() === 'Delivered');

                Array.from(select.options).forEach(option => {
                    if (anyDelivered && option.value !== 'Delivered') {
                        option.classList.add('disabled-option');
                        option.disabled = true;
                    } else {
                        option.classList.remove('disabled-option');
                        option.disabled = false;
                    }
                });

                if (allDelivered) {
                    select.value = 'Delivered';
                }
            }

            document.getElementById('updateAllStatus').addEventListener('click', async function () {
                const newStatus = document.getElementById('globalStatus').value;
                const productIds = Array.from(document.querySelectorAll('.product-item'))
                    .filter(el => {
                        const currentStatus = el.querySelector('.product-status-badge').textContent.trim();
                        return currentStatus !== 'Returned' && 
                               (currentStatus !== 'Cancelled' || newStatus === 'Cancelled') &&
                               (currentStatus !== 'Delivered' || newStatus === 'Delivered');
                    })
                    .map(el => el.getAttribute('data-product-id'));

                if (productIds.length === 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'No editable items available!',
                        position: 'top-end',
                        toast: true,
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });
                    return;
                }

                const result = await Swal.fire({
                    title: 'Confirm Update',
                    text: `Are you sure you want to update ${productIds.length} item(s) to ${newStatus}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, update',
                    cancelButtonText: 'No',
                    background: '#1e293b',
                    color: '#e6e6e6',
                    confirmButtonColor: '#3b82f6',
                    cancelButtonColor: '#ef4444',
                    width: '400px'
                });

                if (!result.isConfirmed) return;

                fetch(`/admin/order/update-all-items/<%= order._id %>`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: newStatus, productIds })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: data.message,
                            position: 'top-end',
                            toast: true,
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                        document.querySelectorAll('.product-item').forEach(item => {
                            const productId = item.getAttribute('data-product-id');
                            if (productIds.includes(productId)) {
                                const badge = item.querySelector('.product-status-badge');
                                badge.textContent = newStatus;
                                badge.className = `product-status-badge status-badge bg-${
                                    newStatus === 'Delivered' ? 'green' :
                                    newStatus === 'Cancelled' ? 'red' : 'yellow'
                                }-500 text-white text-xs px-2 py-1 rounded-full`;
                            }
                        });
                        if (data.orderStatus) {
                            const orderStatusBadge = document.querySelector('.status-badge');
                            orderStatusBadge.textContent = data.orderStatus;
                            orderStatusBadge.className = `status-badge bg-${
                                data.orderStatus === 'Delivered' ? 'green' :
                                data.orderStatus === 'Cancelled' ? 'red' : 'yellow'
                            }-500 text-white`;
                        }
                        updateStatusDropdown();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to update statuses',
                            position: 'top-end',
                            toast: true,
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to update statuses',
                        position: 'top-end',
                        toast: true,
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });
                });
            });

            // Accept Return
            document.querySelectorAll('.accept-return-btn').forEach(button => {
                button.addEventListener('click', async function () {
                    const orderId = this.getAttribute('data-order-id');
                    const productId = this.getAttribute('data-product-id');

                    const result = await Swal.fire({
                        title: 'Confirm Return',
                        text: `Are you sure you want to accept the return for product ${productId}?`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, accept',
                        cancelButtonText: 'No',
                        background: '#1e293b',
                        color: '#e6e6e6',
                        confirmButtonColor: '#22c55e',
                        cancelButtonColor: '#ef4444',
                        width: '400px'
                    });

                    if (!result.isConfirmed) return;

                    fetch('/admin/order/accept-return', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ orderId, productId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: data.message,
                                position: 'top-end',
                                toast: true,
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                            updateItemStatus(productId, 'Returned', 'bg-purple-500');
                            if (data.orderStatus) {
                                const orderStatusBadge = document.querySelector('.status-badge');
                                orderStatusBadge.textContent = data.orderStatus;
                                orderStatusBadge.className = `status-badge bg-${data.orderStatus === 'Delivered' ? 'green' : data.orderStatus === 'Cancelled' ? 'red' : data.orderStatus === 'Returned' ? 'purple' : 'yellow'}-500 text-white`;
                            }
                            updateStatusDropdown();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to accept return',
                                position: 'top-end',
                                toast: true,
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to process return request',
                            position: 'top-end',
                            toast: true,
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                    });
                });
            });

            // Reject Return
            document.querySelectorAll('.reject-return-btn').forEach(button => {
                button.addEventListener('click', async function () {
                    const orderId = this.getAttribute('data-order-id');
                    const productId = this.getAttribute('data-product-id');

                    const result = await Swal.fire({
                        title: 'Confirm Rejection',
                        text: `Are you sure you want to reject the return for product ${productId}?`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, reject',
                        cancelButtonText: 'No',
                        background: '#1e293b',
                        color: '#e6e6e6',
                        confirmButtonColor: '#ef4444',
                        cancelButtonColor: '#22c55e',
                        width: '400px'
                    });

                    if (!result.isConfirmed) return;

                    fetch('/admin/order/reject-return', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ orderId, productId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: data.message,
                                position: 'top-end',
                                toast: true,
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                            updateItemStatus(productId, 'Delivered', 'bg-green-500');
                            updateStatusDropdown();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to reject return',
                                position: 'top-end',
                                toast: true,
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to process return request',
                            position: 'top-end',
                            toast: true,
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true
                        });
                    });
                });
            });

            // Initial check
            updateStatusDropdown();
        });
    </script>
</body>
</html>