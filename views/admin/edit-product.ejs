<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta content="width=device-width, initial-scale=1.0" name="viewport" />
  <title>Edit Product</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    .image-preview,
    .cropped-image {
      width: 150px;
      height: 150px;
      object-fit: cover;
      border-radius: 4px;
    }
    .image-cropper-container {
      display: none;
      margin-bottom: 1rem;
    }
    .thumbnail {
      position: relative;
      width: 150px;
      height: 150px;
      margin: 0;
    }
    .remove-icon {
      position: absolute;
      top: -5px;
      right: -5px;
      background: #ef4444;
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      text-align: center;
      cursor: pointer;
      font-size: 14px;
      line-height: 20px;
    }
    .error-message {
      color: red;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }
  </style>
</head>

<body class="bg-gray-900 text-gray-300">
  <div class="flex h-screen">
    <%- include("../partials/admin/header") %>

    <div class="flex-1 p-6 overflow-y-auto">
      <div class="bg-gray-800 p-6 rounded-lg">
        <h1 class="text-2xl font-bold mb-6">Edit Product</h1>

        <form id="productForm" action="/admin/editProduct/<%= product._id %>" method="post" enctype="multipart/form-data">
          <!-- Form Grid for Inputs -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <!-- Product Name -->
            <div>
              <label class="block mb-2">Product Name *</label>
              <input name="productName" class="w-full p-2 bg-gray-700 rounded border border-gray-600" value="<%= product.productName %>" type="text" id="product_name" />
              <div id="productName-error" class="error-message"></div>
            </div>

            <!-- Product Description -->
            <div>
              <label class="block mb-2">Product Description *</label>
              <textarea name="description" class="w-full p-2 bg-gray-700 rounded border border-gray-600 h-32" id="descriptionid"><%= product.description %></textarea>
              <div id="description-error" class="error-message"></div>
            </div>
            
            <div>
              <label class="block mb-2">How To Use *</label>
              <textarea name="howToUse" class="w-full p-2 bg-gray-700 rounded border border-gray-600 h-32"><%= product.howToUse %></textarea>
              <div id="howToUse-error" class="error-message"></div>
            </div>

            <!-- Product Category -->
            <div>
              <label class="block mb-2">Product Category</label>
              <select name="category" class="w-full p-2 bg-gray-700 rounded border border-gray-600">
                <% for(let i = 0; i < cat.length; i++) { %>
                  <option value="<%= cat[i]._id %>" <%= product.category.toString() === cat[i]._id.toString() ? 'selected' : '' %>>
                    <%= cat[i].name %>
                  </option>
                <% } %>
              </select>
              <div id="category-error" class="error-message"></div>
            </div>

            <!-- Regular Price -->
            <div>
              <label class="block mb-2">Regular Price *</label>
              <input name="regularPrice" class="w-full p-2 bg-gray-700 rounded border border-gray-600" value="<%= product.regularPrice %>" type="text" />
              <div id="regularPrice-error" class="error-message"></div>
            </div>

            <!-- Sale Price -->
            <div>
              <label class="block mb-2">Sale Price</label>
              <input name="salePrice" class="w-full p-2 bg-gray-700 rounded border border-gray-600" value="<%= product.salePrice %>" type="text" />
              <div id="salePrice-error" class="error-message"></div>
            </div>

            <!-- Skin Type -->
            <div>
              <label class="block mb-2">Skin Type</label>
              <input name="skintype" class="w-full p-2 bg-gray-700 rounded border border-gray-600" value="<%= product.skintype || '' %>" type="text" />
              <div id="skintype-error" class="error-message"></div>
            </div>

            <div>
              <label class="block mb-2">Skin Concern</label>
              <input name="skinConcern" class="w-full p-2 bg-gray-700 rounded border border-gray-600" value="<%= product.skinConcern || ''%>" type="text"/>
              <div id="skinConcern-error" class="error-message"></div>
            </div>

            <div class="input-container">
              <label class="block mb-2">Stock Quantity *</label>
              <input name="quantity" class="w-full p-2 bg-gray-700 rounded border border-gray-600" type="number" value="<%= product.quantity %>"/>
              <div id="quantity-error" class="error-message"></div>
            </div> 
          </div>

          <!-- Product Images Section -->
          <div class="bg-gray-700 p-6 rounded-lg mb-8">
            <h2 class="text-xl font-bold mb-4">Product Images *</h2>
            <p class="text-gray-400 mb-4">Upload at least 3 product images. Square images are recommended.</p>

            <!-- Image Preview Container -->
            <div id="image-preview-container" class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <% if (product.productImage && product.productImage.length > 0) { %>
                <% product.productImage.forEach((image, i) => { %>
                  <div class="thumbnail">
                    <img src="/Uploads/product-images/<%= image %>" alt="Product Image <%= i %>" class="image-preview" 
                         onerror="console.log('Failed to load image: /Uploads/product-images/<%= image %>')" />
                    <span class="remove-icon" onclick="removeExistingImage('<%= image %>', this)">Ã—</span>
                  </div>
                <% }) %>
              <% } else { %>
                <p class="text-gray-400">No images available</p>
              <% } %>
            </div>

            <!-- File Input -->
            <div class="mb-4">
              <input type="file" name="imageFile" id="imageInput" accept="image/png, image/jpeg, image/jpg" 
                     class="w-full p-2 bg-gray-700 rounded border border-gray-600" />
              <div id="images-error" class="error-message"></div>
            </div>

            <!-- Cropper Container -->
            <div id="cropperContainer" class="image-cropper-container">
              <div class="max-w-full mb-4">
                <img id="imageToCrop" src="" alt="Image to crop" class="cropped-image" />
              </div>
              <div class="flex justify-end gap-2">
                <button type="button" id="cancelCropButton" class="px-3 py-1 bg-gray-600 text-white rounded">Cancel</button>
                <button type="button" id="saveButton" class="px-3 py-1 bg-green-600 text-white rounded">Save Crop</button>
              </div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end">
              <button id="submitButton" type="submit" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                Update Product
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <%- include("../partials/admin/footer") %>
  </body>

  <script>
    let uploadedImages = [];
    const MAX_IMAGES = 8;
    let cropper = null;

    document.addEventListener('DOMContentLoaded', function () {
      setupExistingImageHandlers();
      const imageInput = document.getElementById('imageInput');
      imageInput.addEventListener('change', handleImageUpload);

      document.getElementById('cancelCropButton').addEventListener('click', function () {
        document.getElementById('cropperContainer').style.display = 'none';
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
        document.getElementById('imageInput').value = '';
      });

      document.getElementById('variantContainer')?.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-variant')) {
          e.target.parentElement.remove();
          checkVariantCount();
        }
      });

      document.getElementById('productForm').addEventListener('submit', async function (event) {
        event.preventDefault();
        if (!validateForm()) return;

        const formData = new FormData(this);

        const newImages = document.querySelectorAll('#image-preview-container .thumbnail[data-is-new="true"] img');
        if (newImages.length > 0) {
          if (formData.has('imageFile')) {
            formData.delete('imageFile');
          }
          
          let imagePromises = [];
          newImages.forEach((img, index) => {
            imagePromises.push(
              fetch(img.src)
                .then(res => res.blob())
                .then(blob => {
                  const file = new File([blob], `cropped-image-${index}.jpeg`, { type: 'image/jpeg' });
                  formData.append('imageFile', file);
                })
            );
          });
          await Promise.all(imagePromises);
        }

        console.log('Submitting form data:');
        for (let [key, value] of formData.entries()) {
          if (value instanceof File) {
            console.log(`${key}: File named ${value.name}, size ${value.size} bytes`);
          } else {
            console.log(`${key}: ${value}`);
          }
        }

        try {
          const response = await fetch(`/admin/editProduct/<%= product._id %>`, {
            method: 'POST',
            body: formData
          });
          
          console.log('Response status:', response.status);
          console.log('Response headers:', response.headers);
          
          const result = await response.json();
          console.log('Parsed result:', result);

          if (response.ok && result.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: result.message,
              confirmButtonColor: '#3085d6',
            }).then(() => {
              if (result.redirectUrl) window.location.href = result.redirectUrl;
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: result.message || 'Failed to update product',
              confirmButtonColor: '#d33',
            });
          }
        } catch (error) {
          console.error('Form submission error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred. Please try again.',
            confirmButtonColor: '#d33',
          });
        }
      });
    });

    function setupExistingImageHandlers() {
      const existingImages = document.querySelectorAll('.thumbnail img');
      uploadedImages = Array.from(existingImages).map(img => ({
        dataUrl: img.src,
        filename: img.alt || 'existing-image'
      }));
      checkImageCount(); // Initial check
    }

    function handleImageUpload(event) {
      const file = event.target.files[0];
      if (!file) return;

      if (uploadedImages.length >= MAX_IMAGES) {
        displayErrorMessage('images-error', `You can only upload a maximum of ${MAX_IMAGES} images`);
        event.target.value = '';
        return;
      }

      if (!file.type.match('image.*')) {
        displayErrorMessage('images-error', 'Please upload only image files');
        event.target.value = '';
        return;
      }

      const reader = new FileReader();
      reader.onload = function (e) {
        const cropperContainer = document.getElementById('cropperContainer');
        cropperContainer.style.display = 'block';
        document.getElementById('imageToCrop').src = e.target.result;

        if (cropper) cropper.destroy();

        cropper = new Cropper(document.getElementById('imageToCrop'), {
          aspectRatio: 1,
          viewMode: 1,
          guides: true,
          background: false,
          autoCropArea: 1,
          zoomable: true,
        });

        document.getElementById('saveButton').onclick = function () {
          if (!cropper) return;

          const croppedCanvas = cropper.getCroppedCanvas({
            width: 440,
            height: 440,
            fillColor: '#fff',
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
          });

          croppedCanvas.toBlob(blob => {
            const croppedFile = new File([blob], file.name, {
              type: 'image/jpeg',
              lastModified: new Date().getTime()
            });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            
            const imageInput = document.getElementById('imageInput');
            imageInput.files = dataTransfer.files;

            const thumbnail = document.createElement('div');
            thumbnail.classList.add('thumbnail');
            thumbnail.dataset.isNew = 'true';

            const thumbImg = document.createElement('img');
            thumbImg.src = croppedCanvas.toDataURL('image/jpeg', 0.9);
            thumbImg.alt = 'New Product Image';
            thumbImg.classList.add('image-preview');

            const removeIcon = document.createElement('span');
            removeIcon.classList.add('remove-icon');
            removeIcon.innerHTML = 'Ã—';
            removeIcon.onclick = function () {
              thumbnail.remove();
              
              if (document.querySelectorAll('#image-preview-container .thumbnail[data-is-new="true"]').length === 0) {
                imageInput.value = '';
              }
              
              uploadedImages = uploadedImages.filter(img => img.dataUrl !== thumbImg.src);
              checkImageCount();
            };

            thumbnail.appendChild(thumbImg);
            thumbnail.appendChild(removeIcon);
            document.getElementById('image-preview-container').appendChild(thumbnail);

            uploadedImages.push({
              dataUrl: thumbImg.src,
              filename: croppedFile.name,
              isNew: true
            });

            cropper.destroy();
            cropper = null;
            document.getElementById('cropperContainer').style.display = 'none';
            document.getElementById('images-error').textContent = '';
            checkImageCount();
          }, 'image/jpeg', 0.9);
        };
      };
      reader.readAsDataURL(file);
    }

    function validateForm() {
      clearErrorMessages();
      const name = document.getElementsByName('productName')[0].value.trim();
      const description = document.getElementById('descriptionid').value.trim();
      const howToUse = document.getElementsByName('howToUse')[0].value.trim();
      const price = document.getElementsByName('regularPrice')[0].value.trim();
      const saleprice = document.getElementsByName('salePrice')[0].value.trim();
      const quantity = document.getElementsByName('quantity')[0].value.trim();
      let isValid = true;

      if (!name) {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
      }
      if (!description) {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
      }
      if (!howToUse) {
        displayErrorMessage('howToUse-error', 'Please enter how to use instructions.');
        isValid = false;
      }
      if (!price || !/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid positive price (e.g., 10 or 10.99).');
        isValid = false;
      }
      if (saleprice && (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0)) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price (e.g., 8 or 8.99).');
        isValid = false;
      }
      if (saleprice && parseFloat(price) <= parseFloat(saleprice)) {
        displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
        isValid = false;
      }
      if (!quantity || !/^\d+$/.test(quantity) || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative integer for quantity.');
        isValid = false;
      }

      if (!checkImageCount()) {
        displayErrorMessage('images-error', 'Please select at least 3 images.');
        Swal.fire({
          icon: 'error',
          title: 'Image Required',
          text: 'Please upload at least 3 product images.',
          confirmButtonColor: '#d33',
        });
        isValid = false;
      }

      return isValid;
    }

    function checkImageCount() {
      const imageCount = document.querySelectorAll('#image-preview-container .thumbnail').length;
      const isValid = imageCount >= 3;
      if (!isValid) {
        displayErrorMessage('images-error', 'Please select at least 3 images.');
      } else {
        document.getElementById('images-error').textContent = '';
      }
      return isValid;
    }

    function checkVariantCount() {
      const variantCount = document.querySelectorAll('#variantContainer .variant-entry').length;
      if (variantCount < 1) {
        displayErrorMessage('variants-error', 'Please add at least one variant.');
      } else {
        document.getElementById('variants-error').textContent = '';
      }
      return variantCount >= 1;
    }

    function removeExistingImage(imagePath, element) {
      const imagePreviewItem = element.closest('.thumbnail');
      const isNewImage = imagePreviewItem.dataset.isNew === 'true';

      if (isNewImage) {
        uploadedImages = uploadedImages.filter(img => img.dataUrl !== imagePath);
      } else {
        const imagePathOnly = getImagePathFromSrc(imagePath);
        let hiddenInput = document.querySelector('input[name="removedImages"]');
        if (hiddenInput) {
          let currentValue = hiddenInput.value;
          hiddenInput.value = currentValue ? currentValue + ',' + imagePathOnly : imagePathOnly;
        } else {
          hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = 'removedImages';
          hiddenInput.value = imagePathOnly;
          document.forms[0].appendChild(hiddenInput);
        }
        uploadedImages = uploadedImages.filter(img => img.dataUrl !== imagePath);
      }

      imagePreviewItem.remove();
      checkImageCount();
    }

    function getImagePathFromSrc(src) {
      if (typeof src !== 'string') return '';
      if (src.startsWith('/')) return src.split('/').slice(1).join('/');
      if (src.includes('://')) {
        const url = new URL(src);
        return url.pathname.substring(1);
      }
      return src;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      if (errorElement) errorElement.textContent = message;
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName('error-message');
      Array.from(errorElements).forEach(element => element.textContent = '');
    }
  </script>
</body>
</html>